{"ast":null,"code":"var _jsxFileName = \"/home/cqlnode/Documents/ADMIn/src/pages/Categories/AddCategory.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Row, Col, Card, CardBody, Label } from \"reactstrap\";\nimport { AvForm, AvField, AvRadioGroup, AvRadio } from \"availity-reactstrap-validation\";\nimport { addUser, clearUser, setModalType, toggleModal, updateUser } from \"../../store/user/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport { useHistory } from \"react-router\";\nimport { addCategory, updateCategory } from \"../../store/category/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddCategory = ({\n  modal,\n  modalType\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const state = useSelector(state => state.category);\n  let history = useHistory(); // let user = \n\n  const [data, setData] = useState({\n    name: \"\",\n    image: \"\"\n  });\n  useEffect(() => {\n    setData({\n      name: state.category.name,\n      image: state.category.image\n    });\n  }, [state.category]);\n\n  const handleChange = e => {\n    console.log();\n\n    if (e.target.name === \"image\") {\n      setData(prev => {\n        return { ...prev,\n          [e.target.name]: e.target.files[0]\n        };\n      });\n    } else {\n      setData(prev => {\n        return { ...prev,\n          [e.target.name]: e.target.value\n        };\n      });\n    }\n\n    console.log(data);\n  };\n\n  const handleSubmit = () => {\n    let formData = new FormData();\n    formData.append(\"name\", data.name);\n    formData.append(\"image\", data.image);\n    dispatch(addCategory(formData, clearInputs));\n  };\n\n  const handleUpdate = () => {\n    let formData = new FormData(); // console.log(state.user._id);\n    // alert(state.user.user_id)\n\n    formData.append(\"name\", data.name);\n\n    if (data.image) {\n      formData.append(\"image\", data.image);\n    }\n\n    dispatch(updateCategory(state.category._id, formData, clearInputs));\n  };\n\n  const clearInputs = () => {\n    setData({\n      name: \"\",\n      image: \"\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: state.isModalOpen,\n      scrollable: true,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: () => dispatch(toggleModal()),\n        children: \"Add Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pae-content\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              md: {\n                size: 12\n              },\n              children: /*#__PURE__*/_jsxDEV(AvForm, {\n                className: \"needs-validation\",\n                onValidSubmit: state.modalType != 'edit' ? handleSubmit : handleUpdate,\n                children: [/*#__PURE__*/_jsxDEV(Row, {\n                  children: /*#__PURE__*/_jsxDEV(Col, {\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mb-3\",\n                      children: [/*#__PURE__*/_jsxDEV(Label, {\n                        className: \"form-label\",\n                        htmlFor: \"validationCustom01\",\n                        children: \"Name\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 114,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                        name: \"name\",\n                        placeholder: \"Name\",\n                        type: \"text\",\n                        errorMessage: \"Enter Name\",\n                        className: \"form-control\",\n                        validate: {\n                          required: {\n                            value: true\n                          },\n                          minLength: {\n                            value: 3,\n                            errorMessage: \"Min 3 chars.\"\n                          }\n                        },\n                        id: \"validationCustom01\",\n                        value: data.name,\n                        onChange: handleChange\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 120,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 113,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 112,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Row, {\n                  children: /*#__PURE__*/_jsxDEV(Col, {\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mb-3\",\n                      children: [/*#__PURE__*/_jsxDEV(Label, {\n                        className: \"form-label\",\n                        htmlFor: \"validationCustom02\",\n                        children: \"Image\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 147,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(AvField, {\n                        name: \"image\",\n                        placeholder: \"Select Image\",\n                        type: \"file\",\n                        errorMessage: \"Select Image\",\n                        className: \"form-control\",\n                        validate: {\n                          required: {\n                            value: true\n                          }\n                        },\n                        id: \"validationCustom02\",\n                        onChange: handleChange\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 153,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 146,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 145,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    width: \"100\",\n                    color: \"primary\",\n                    type: \"submit\",\n                    disabled: state.loading,\n                    children: state.loading ? /*#__PURE__*/_jsxDEV(Loader, {\n                      type: \"TailSpin\",\n                      color: \"#00BFFF\",\n                      height: 20,\n                      width: 48\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 175,\n                      columnNumber: 25\n                    }, this) : state.modalType == 'edit' ? 'Update' : 'Submit'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    color: \"secondary\",\n                    onClick: () => {\n                      dispatch(toggleModal());\n                      dispatch(setModalType(''));\n                      clearInputs();\n                    },\n                    children: \"Cancel\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 186,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddCategory, \"EbTNcGMfIlBLBTgAYAwdgJ9Bqd4=\", false, function () {\n  return [useDispatch, useSelector, useHistory];\n});\n\n_c = AddCategory;\nexport default AddCategory;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCategory\");","map":{"version":3,"sources":["/home/cqlnode/Documents/ADMIn/src/pages/Categories/AddCategory.jsx"],"names":["React","useState","useEffect","Button","Modal","ModalHeader","ModalBody","ModalFooter","Row","Col","Card","CardBody","Label","AvForm","AvField","AvRadioGroup","AvRadio","addUser","clearUser","setModalType","toggleModal","updateUser","useDispatch","useSelector","Loader","useHistory","addCategory","updateCategory","AddCategory","modal","modalType","dispatch","state","category","history","data","setData","name","image","handleChange","e","console","log","target","prev","files","value","handleSubmit","formData","FormData","append","clearInputs","handleUpdate","_id","isModalOpen","size","required","minLength","errorMessage","loading"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Row,\n  Col,\n  Card,\n  CardBody,\n  Label,\n} from \"reactstrap\";\nimport {\n  AvForm,\n  AvField,\n  AvRadioGroup,\n  AvRadio,\n} from \"availity-reactstrap-validation\";\nimport { addUser, clearUser, setModalType, toggleModal, updateUser } from \"../../store/user/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport { useHistory } from \"react-router\";\nimport { addCategory,updateCategory } from \"../../store/category/actions\";\n\nconst AddCategory = ({ modal, modalType }) => {\n\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state.category);\n  let history = useHistory();\n  \n  // let user = \n  \n\n  const [data, setData] = useState({\n    name: \"\",\n    image: \"\",\n  });\n\n  useEffect(() => {\n    setData({\n      name: state.category.name,\n      image: state.category.image,\n    })\n  }, [state.category])\n\n \n  const handleChange = (e) => {\n    console.log();\n\n    if (e.target.name === \"image\") {\n      setData((prev) => {\n        return {\n          ...prev,\n          [e.target.name]: e.target.files[0],\n        };\n      });\n    } else {\n      setData((prev) => {\n        return {\n          ...prev,\n          [e.target.name]: e.target.value,\n        };\n      });\n    }\n\n    console.log(data);\n  };\n\n  const handleSubmit = () => {\n    let formData = new FormData();\n    formData.append(\"name\", data.name);\n    formData.append(\"image\", data.image);\n    dispatch(addCategory(formData, clearInputs));\n  };\n\n  const handleUpdate = () => {\n\n    let formData = new FormData();\n    // console.log(state.user._id);\n    // alert(state.user.user_id)\n    formData.append(\"name\", data.name);\n    if(data.image){\n      formData.append(\"image\", data.image);\n    }\n    dispatch(updateCategory(state.category._id,formData, clearInputs));\n    \n  }\n\n  const clearInputs = () => {\n    setData({\n      name: \"\",\n      image: \"\",\n    });\n  };\n\n  return (\n    <div>\n      <Modal isOpen={state.isModalOpen} scrollable={true}>\n        <ModalHeader toggle={()=> dispatch(toggleModal())}>Add Category</ModalHeader>\n        <ModalBody>\n          <div className=\"pae-content\">\n            <Row>\n              <Col md={{ size: 12 }}>\n                <AvForm\n                  className=\"needs-validation\"\n                  onValidSubmit={state.modalType != 'edit'? handleSubmit : handleUpdate}              \n                > \n                  \n                  <Row>\n                    <Col>\n                      <div className=\"mb-3\">\n                        <Label\n                          className=\"form-label\"\n                          htmlFor=\"validationCustom01\"\n                        >\n                          Name\n                        </Label>\n                        <AvField\n                          name=\"name\"\n                          placeholder=\"Name\"\n                          type=\"text\"\n                          errorMessage=\"Enter Name\"\n                          className=\"form-control\"\n                          validate={{\n                            required: { value: true },\n                            minLength: {\n                              value: 3,\n                              errorMessage: \"Min 3 chars.\",\n                            },\n                          }}\n                          id=\"validationCustom01\"\n                          value={data.name}\n                          onChange={handleChange}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n           \n\n\n          \n                  <Row>\n                    <Col>\n                      <div className=\"mb-3\">\n                        <Label\n                          className=\"form-label\"\n                          htmlFor=\"validationCustom02\"\n                        >\n                          Image\n                        </Label>\n                        <AvField\n                          name=\"image\"\n                          placeholder=\"Select Image\"\n                          type=\"file\"\n                          errorMessage=\"Select Image\"\n                          className=\"form-control\"\n                          validate={{ required: { value: true } }}\n                          id=\"validationCustom02\"\n                          onChange={handleChange}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n\n                  <ModalFooter>\n                    <Button\n                      width=\"100\"\n                      color=\"primary\"\n                      type=\"submit\"\n                      disabled={state.loading}\n                    >\n                      {state.loading ? (\n                        <Loader\n                          type=\"TailSpin\"\n                          color=\"#00BFFF\"\n                          height={20}\n                          width={48}\n                        />\n                      ) : (\n                        state.modalType == 'edit'? 'Update': 'Submit'\n                      \n                      )}\n                    </Button>\n                    <Button color=\"secondary\" onClick={() =>{ \n                      dispatch(toggleModal())\n                      dispatch(setModalType(''))                        \n                      clearInputs()\n                      }}>\n                      Cancel\n                    </Button>\n                  </ModalFooter>\n                </AvForm>\n              </Col>\n            </Row>\n          </div>\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n};\n\nexport default AddCategory;"]},"metadata":{},"sourceType":"module"}