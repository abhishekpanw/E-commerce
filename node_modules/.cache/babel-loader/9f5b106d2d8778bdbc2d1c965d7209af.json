{"ast":null,"code":"import { takeEvery, put, call } from \"redux-saga/effects\"; // Calender Redux States\n\nimport { ADD_NEW_EVENT, DELETE_EVENT, GET_CATEGORIES, GET_EVENTS, UPDATE_EVENT } from \"./actionTypes\";\nimport { getEventsSuccess, getEventsFail, addEventFail, addEventSuccess, updateEventSuccess, updateEventFail, deleteEventSuccess, deleteEventFail, getCategoriesSuccess, getCategoriesFail } from \"./actions\"; //Include Both Helper File with needed methods\n\nimport { getEvents, addNewEvent, updateEvent, deleteEvent, getCategories } from \"../../helpers/fackBackend_Helper\";\n\nfunction* fetchEvents() {\n  try {\n    const response = yield call(getEvents);\n    yield put(getEventsSuccess(response));\n  } catch (error) {\n    yield put(getEventsFail(error));\n  }\n}\n\nfunction* onAddNewEvent({\n  payload: event\n}) {\n  try {\n    const response = yield call(addNewEvent, event);\n    yield put(addEventSuccess(response));\n  } catch (error) {\n    yield put(addEventFail(error));\n  }\n}\n\nfunction* onUpdateEvent({\n  payload: event\n}) {\n  try {\n    const response = yield call(updateEvent, event);\n    yield put(updateEventSuccess(response));\n  } catch (error) {\n    yield put(updateEventFail(error));\n  }\n}\n\nfunction* onDeleteEvent({\n  payload: event\n}) {\n  try {\n    const response = yield call(deleteEvent, event);\n    yield put(deleteEventSuccess(response));\n  } catch (error) {\n    yield put(deleteEventFail(error));\n  }\n}\n\nfunction* onGetCategories() {\n  try {\n    const response = yield call(getCategories);\n    yield put(getCategoriesSuccess(response));\n  } catch (error) {\n    yield put(getCategoriesFail(error));\n  }\n}\n\nfunction* calendarSaga() {\n  yield takeEvery(GET_EVENTS, fetchEvents);\n  yield takeEvery(ADD_NEW_EVENT, onAddNewEvent);\n  yield takeEvery(UPDATE_EVENT, onUpdateEvent);\n  yield takeEvery(DELETE_EVENT, onDeleteEvent);\n  yield takeEvery(GET_CATEGORIES, onGetCategories);\n}\n\nexport default calendarSaga;","map":{"version":3,"sources":["/home/cqlnode/Documents/ADMIn/src/store/calendar/saga.js"],"names":["takeEvery","put","call","ADD_NEW_EVENT","DELETE_EVENT","GET_CATEGORIES","GET_EVENTS","UPDATE_EVENT","getEventsSuccess","getEventsFail","addEventFail","addEventSuccess","updateEventSuccess","updateEventFail","deleteEventSuccess","deleteEventFail","getCategoriesSuccess","getCategoriesFail","getEvents","addNewEvent","updateEvent","deleteEvent","getCategories","fetchEvents","response","error","onAddNewEvent","payload","event","onUpdateEvent","onDeleteEvent","onGetCategories","calendarSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC,C,CAEA;;AACA,SACEC,aADF,EAEEC,YAFF,EAGEC,cAHF,EAIEC,UAJF,EAKEC,YALF,QAMO,eANP;AAQA,SACEC,gBADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,eAJF,EAKEC,kBALF,EAMEC,eANF,EAOEC,kBAPF,EAQEC,eARF,EASEC,oBATF,EAUEC,iBAVF,QAWO,WAXP,C,CAaA;;AACA,SACEC,SADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,aALF,QAMO,kCANP;;AAQA,UAAUC,WAAV,GAAwB;AACtB,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMtB,IAAI,CAACgB,SAAD,CAA3B;AACA,UAAMjB,GAAG,CAACO,gBAAgB,CAACgB,QAAD,CAAjB,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMxB,GAAG,CAACQ,aAAa,CAACgB,KAAD,CAAd,CAAT;AACD;AACF;;AAED,UAAUC,aAAV,CAAwB;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAxB,EAA4C;AAC1C,MAAI;AACF,UAAMJ,QAAQ,GAAG,MAAMtB,IAAI,CAACiB,WAAD,EAAcS,KAAd,CAA3B;AACA,UAAM3B,GAAG,CAACU,eAAe,CAACa,QAAD,CAAhB,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMxB,GAAG,CAACS,YAAY,CAACe,KAAD,CAAb,CAAT;AACD;AACF;;AAED,UAAUI,aAAV,CAAwB;AAAEF,EAAAA,OAAO,EAAEC;AAAX,CAAxB,EAA4C;AAC1C,MAAI;AACF,UAAMJ,QAAQ,GAAG,MAAMtB,IAAI,CAACkB,WAAD,EAAcQ,KAAd,CAA3B;AACA,UAAM3B,GAAG,CAACW,kBAAkB,CAACY,QAAD,CAAnB,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMxB,GAAG,CAACY,eAAe,CAACY,KAAD,CAAhB,CAAT;AACD;AACF;;AAED,UAAUK,aAAV,CAAwB;AAAEH,EAAAA,OAAO,EAAEC;AAAX,CAAxB,EAA4C;AAC1C,MAAI;AACF,UAAMJ,QAAQ,GAAG,MAAMtB,IAAI,CAACmB,WAAD,EAAcO,KAAd,CAA3B;AACA,UAAM3B,GAAG,CAACa,kBAAkB,CAACU,QAAD,CAAnB,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMxB,GAAG,CAACc,eAAe,CAACU,KAAD,CAAhB,CAAT;AACD;AACF;;AAED,UAAUM,eAAV,GAA4B;AAC1B,MAAI;AACF,UAAMP,QAAQ,GAAG,MAAMtB,IAAI,CAACoB,aAAD,CAA3B;AACA,UAAMrB,GAAG,CAACe,oBAAoB,CAACQ,QAAD,CAArB,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMxB,GAAG,CAACgB,iBAAiB,CAACQ,KAAD,CAAlB,CAAT;AACD;AACF;;AAED,UAAUO,YAAV,GAAyB;AACvB,QAAMhC,SAAS,CAACM,UAAD,EAAaiB,WAAb,CAAf;AACA,QAAMvB,SAAS,CAACG,aAAD,EAAgBuB,aAAhB,CAAf;AACA,QAAM1B,SAAS,CAACO,YAAD,EAAesB,aAAf,CAAf;AACA,QAAM7B,SAAS,CAACI,YAAD,EAAe0B,aAAf,CAAf;AACA,QAAM9B,SAAS,CAACK,cAAD,EAAiB0B,eAAjB,CAAf;AACD;;AAED,eAAeC,YAAf","sourcesContent":["import { takeEvery, put, call } from \"redux-saga/effects\"\n\n// Calender Redux States\nimport {\n  ADD_NEW_EVENT,\n  DELETE_EVENT,\n  GET_CATEGORIES,\n  GET_EVENTS,\n  UPDATE_EVENT,\n} from \"./actionTypes\";\n\nimport {\n  getEventsSuccess,\n  getEventsFail,\n  addEventFail,\n  addEventSuccess,\n  updateEventSuccess,\n  updateEventFail,\n  deleteEventSuccess,\n  deleteEventFail,\n  getCategoriesSuccess,\n  getCategoriesFail,\n} from \"./actions\"\n\n//Include Both Helper File with needed methods\nimport {\n  getEvents,\n  addNewEvent,\n  updateEvent,\n  deleteEvent,\n  getCategories,\n} from \"../../helpers/fackBackend_Helper\"\n\nfunction* fetchEvents() {\n  try {\n    const response = yield call(getEvents)\n    yield put(getEventsSuccess(response))\n  } catch (error) {\n    yield put(getEventsFail(error))\n  }\n}\n\nfunction* onAddNewEvent({ payload: event }) {\n  try {\n    const response = yield call(addNewEvent, event)\n    yield put(addEventSuccess(response))\n  } catch (error) {\n    yield put(addEventFail(error))\n  }\n}\n\nfunction* onUpdateEvent({ payload: event }) {\n  try {\n    const response = yield call(updateEvent, event)\n    yield put(updateEventSuccess(response))\n  } catch (error) {\n    yield put(updateEventFail(error))\n  }\n}\n\nfunction* onDeleteEvent({ payload: event }) {\n  try {\n    const response = yield call(deleteEvent, event)\n    yield put(deleteEventSuccess(response))\n  } catch (error) {\n    yield put(deleteEventFail(error))\n  }\n}\n\nfunction* onGetCategories() {\n  try {\n    const response = yield call(getCategories)\n    yield put(getCategoriesSuccess(response))\n  } catch (error) {\n    yield put(getCategoriesFail(error))\n  }\n}\n\nfunction* calendarSaga() {\n  yield takeEvery(GET_EVENTS, fetchEvents)\n  yield takeEvery(ADD_NEW_EVENT, onAddNewEvent)\n  yield takeEvery(UPDATE_EVENT, onUpdateEvent)\n  yield takeEvery(DELETE_EVENT, onDeleteEvent)\n  yield takeEvery(GET_CATEGORIES, onGetCategories)\n}\n\nexport default calendarSaga\n"]},"metadata":{},"sourceType":"module"}